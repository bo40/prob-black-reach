mdp

formula k = (sp + 1); // k-th round ...
formula probBAR = 0.7*(r-max(1,k)+1)/r; 

const int r = 5;
const int BLANK = 0;
const int BAR = 1;
const int APPLE = 2;
const int BOUND = 20;

module SlotMachine

  sp : [0..r] init 0;
  end : bool init false;
  terminal : bool init false;
  reel1 : [0..2] init BLANK;  
  reel2 : [0..2] init BLANK;  
  reel3 : [0..2] init BLANK;  
  steps : [0..BOUND] init 0; // must be higher than bound in ltl formulas

  [spin1] end!=true & sp < r -> probBAR:(reel1'=BAR)& (sp'=sp+1) &(steps'=min(BOUND,steps + 1))+ 1-probBAR:(reel1'=APPLE)& (sp'=sp+1)&(steps'=min(BOUND,steps + 1));
  [spin1] end!=true & sp=r -> 1:(end'=true)&(steps'=min(BOUND,steps + 1));

  [spin2] end!=true & sp < r -> probBAR:(reel2'=BAR)& (sp'=sp+1)&(steps'=min(BOUND,steps + 1)) + 1-probBAR:(reel2'=APPLE)& (sp'=sp+1)&(steps'=min(BOUND,steps + 1));
  [spin2] end!=true & sp=r -> 1:(end'=true)&(steps'=min(BOUND,steps + 1));

  [spin3] end!=true & sp < r -> probBAR:(reel3'=BAR)& (sp'=sp+1)&(steps'=min(BOUND,steps + 1)) + 1-probBAR:(reel3'=APPLE)& (sp'=sp+1)&(steps'=min(BOUND,steps + 1));
  [spin3] end!=true & sp=r -> 1:(end'=true)&(steps'=min(BOUND,steps + 1));

  [stop] end!=true & sp <= 2 -> 0.5:(end'=true)&(steps'=min(BOUND,steps + 1)) + 0.5:(sp'=0)&(steps'=min(BOUND,steps + 1));
  [stop] end!=true & sp > 2 -> 0.5:(end'=true)&(steps'=min(BOUND,steps + 1)) + 0.5:(sp'=sp-2)&(steps'=min(BOUND,steps + 1));

  [spin1] end=true & terminal=false -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));
  [spin2] end=true & terminal=false -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));
  [spin3] end=true & terminal=false -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));
  [stop]  end=true & terminal=false -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));

  [spin1] terminal=true -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));
  [spin2] terminal=true -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));
  [spin3] terminal=true -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));
  [stop]  terminal=true -> 1:(terminal'=true)&(steps'=min(BOUND,steps + 1));


endmodule

label "Pr2"  = 
((reel1=BLANK & reel2=BAR   & reel3=BAR  ) |
 (reel1=APPLE & reel2=BAR   & reel3=BAR  ) |
 (reel1=BAR   & reel2=BLANK & reel3=BAR  ) |
 (reel1=BAR   & reel2=APPLE & reel3=BAR  ) |
 (reel1=BAR   & reel2=BAR   & reel3=BLANK) |
 (reel1=BAR   & reel2=BAR   & reel3=APPLE)) & end=true & !terminal;

label "Pr10" = reel1=BAR   & reel2=BAR   & reel3=BAR   & end=true & !terminal;

label "Pr0" = !((reel1=BLANK & reel2=BAR   & reel3=BAR  ) |
 (reel1=APPLE & reel2=BAR   & reel3=BAR  ) |
 (reel1=BAR   & reel2=BLANK & reel3=BAR  ) |
 (reel1=BAR   & reel2=APPLE & reel3=BAR  ) |
 (reel1=BAR   & reel2=BAR   & reel3=BLANK) |
 (reel1=BAR   & reel2=BAR   & reel3=APPLE)) &
!(reel1=BAR   & reel2=BAR   & reel3=BAR) & end=true & !terminal;

label "end" = terminal=true;

label "notEnd" = terminal=false;

label "other" = !(((reel1=BLANK & reel2=BAR   & reel3=BAR  ) |
 (reel1=APPLE & reel2=BAR   & reel3=BAR  ) |
 (reel1=BAR   & reel2=BLANK & reel3=BAR  ) |
 (reel1=BAR   & reel2=APPLE & reel3=BAR  ) |
 (reel1=BAR   & reel2=BAR   & reel3=BLANK) |
 (reel1=BAR   & reel2=BAR   & reel3=APPLE)) & end=true & !terminal) &
 !(reel1=BAR   & reel2=BAR   & reel3=BAR   & end=true & !terminal) &
 !(!((reel1=BLANK & reel2=BAR   & reel3=BAR  ) |
  (reel1=APPLE & reel2=BAR   & reel3=BAR  ) |
  (reel1=BAR   & reel2=BLANK & reel3=BAR  ) |
  (reel1=BAR   & reel2=APPLE & reel3=BAR  ) |
  (reel1=BAR   & reel2=BAR   & reel3=BLANK) |
  (reel1=BAR   & reel2=BAR   & reel3=APPLE)) &
  !(reel1=BAR   & reel2=BAR   & reel3=BAR) & end=true & !terminal);
